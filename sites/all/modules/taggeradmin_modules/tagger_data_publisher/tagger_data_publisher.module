<?php
/**
 * @file
 * This is the file description for Tagger Data Publisher module.
 *
 * In this more verbose, multi-line description, you can specify what this
 * file does exactly. Make sure to wrap your documentation in column 78 so
 * that the file can be displayed nicely in default-sized consoles.
 */

/**
 * Implements hook_menu().
 */
function tagger_data_publisher_menu() {
  $items = array();

  $items['taggeradmin_log'] = array(
    'title' => 'Log',
    'description' => 'This page returns the contents of the logs',
    'page callback' => 'tagger_data_publisher_menu_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function tagger_data_publisher_menu_page($no_items = 10, $action = 'all', $vids = 'all', $starting_point = '0') {
  if (!ctype_digit($no_items)) {
    return tagger_data_publisher_error('Invalid number of items: '. $no_items);
  }
  if ($no_items > 200) {
    $no_items = 200;
  }
  if(!in_array($action, array('create', 'update', 'delete', 'all'))) {
    return tagger_data_publisher_error('Invalid action: '. $action);
  }
  $validated_vids = array();

  foreach(explode('|', $vids) AS $vid) {
    if (ctype_digit($vid)) {
      $validated_vids[] = $vid;
    }
  }
  if (!ctype_digit($starting_point)) {
    return tagger_data_publisher_error('Invalid starting point: '. $starting_point);
  }
  $sql = 'SELECT * FROM {tagger_data_log} WHERE logid > :logid';
  $args = array(':logid' => $starting_point);
  
  if($action != 'all') {
    $sql .= ' && action = :action';
    $args[':action'] = $action;
  }
  if(count($validated_vids) > 0) {
    if(count($validated_vids) > 1) {
      $sql .= ' && vid IN (:vids)';
      $args[':vids'] = $validated_vids;
    }
    if(count($validated_vids) == 1) {
      $sql .= ' && vid = :vids';
      $args[':vids'] = $validated_vids[0];
    }
  }
  $sql .= ' ORDER BY logid ASC';
  $result = db_query_range($sql, 0, $no_items, $args);
  $data = array();
  foreach ($result as $record) {
    $temp = $record;
    $temp->synonyms = unserialize($record->synonyms);
    $temp->related = unserialize($record->related);
    $temp->links = unserialize($record->links); 
    $data[] =$temp;
  }
  
  return drupal_json_output($data);
}


function tagger_data_publisher_error($text) {
  print "Error: ". $text; 
  exit;
}